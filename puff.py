import logging
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "warehouse_data.json"

# –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_data = {
    "warehouse_city": {
        "Malasian x Protest - –í–∏–Ω–æ–≥—Ä–∞–¥ –º–∞—Ä–º–µ–ª–∞–¥": 3,
        "Malasian x Protest - –ö–æ–ª–∞ –≤–∞–Ω–∏–ª—å": 2,
        "Malasian x Protest - –ö—Ä–∞—Å–Ω—ã–µ –ª–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã": 3,
        "Malasian x Protest - –õ–∞–π–º –∫–∏–≤–∏": 3,
        "Podonki Blood - –ú–∞–ª–∏–Ω–æ–≤—ã–π –ª–∏–º–æ–Ω–∞–¥": 3,
        "Podonki Blood - –ß—ë—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞": 3,
        "–ê–Ω–∞—Ä—Ö–∏—è V2 Strong –õ–∏–º–æ–Ω–Ω—ã–π –º–∞—Ä–º–µ–ª–∞–¥": 2,
        "–ê–Ω–∞—Ä—Ö–∏—è V2 Strong –ö–ª—é–∫–≤–∞ –±—Ä—É—Å–Ω–∏–∫–∞": 2,
        "–ú–æ–Ω–∞—Ä—Ö–∏—è - –õ–∏–º–æ–Ω –≤–∏–Ω–æ–≥—Ä–∞–¥": 2,
        "–ú–æ–Ω–∞—Ä—Ö–∏—è - –ú–∞–ª–∏–Ω–∞ –ª–∏–º–æ–Ω": 2,
        "MPAK & –ß–Å NADO - –ê—Ä–±—É–∑ –º–∞–ª–∏–Ω–∞": 3,
        "MPAK & –ß–Å NADO - –í–∏–Ω–æ–≥—Ä–∞–¥ –º—è—Ç–∞": 3,
        "MPAK & –ß–Å NADO - –ö–∏—Å–ª—ã–π –ø–µ—Ä—Å–∏–∫": 3,
        "MPAK & –ß–Å NADO - –°–ø—Ä–∞–π—Ç": 3,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –í–∏—à–Ω—è –∂–∏–º–æ–ª–æ—Å—Ç—å": 2,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –ß–µ—Ä–µ—à–Ω—è –∫–ª—é–∫–≤–∞": 2,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –Ø–±–ª–æ–∫–æ –∫–ª—é–∫–≤–∞": 2,
        "LOST MARY MO30000 - –ö–∏—Å–ª—ã–π –≤–∏–Ω–æ–≥—Ä–∞–¥ –ª—ë–¥": 1,
        "LOST MARY OS12000 –í–∏–Ω–æ–≥—Ä–∞–¥ –ª–∏–º–æ–Ω –ª—ë–¥": 0,
        "LOST MARY OS12000 –õ–µ–¥–∞–Ω–∞—è –µ–∂–µ–≤–∏–∫–∞": 1,
        "Malasian x Protest - –ú–∞—Ä–∞–∫—É–π—è –∑–µ–ª—ë–Ω–æ–µ —è–±–ª–æ–∫": 2,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –ê–Ω–∞–Ω–∞—Å –º–∞–ª–∏–Ω–∞": 2,
        "–ú–æ–Ω–∞—Ä—Ö–∏—è - –°–º–æ—Ä–æ–¥–∏–Ω–æ–≤—ã–µ –ª–µ–¥–µ–Ω—Ü—ã": 2,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –ö—Ä–∞—Å–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞": 2
    },
    "warehouse_talovka": {
        "Malasian x Protest - –í–∏–Ω–æ–≥—Ä–∞–¥ –º–∞—Ä–º–µ–ª–∞–¥": 1,
        "Malasian x Protest - –ö–æ–ª–∞ –≤–∞–Ω–∏–ª—å": 1,
        "Malasian x Protest - –ö—Ä–∞—Å–Ω—ã–µ –ª–µ—Å–Ω—ã–µ —è–≥–æ–¥—ã": 0,
        "Malasian x Protest - –õ–∞–π–º –∫–∏–≤–∏": 1,
        "Podonki Blood - –ú–∞–ª–∏–Ω–æ–≤—ã–π –ª–∏–º–æ–Ω–∞–¥": 1,
        "Podonki Blood - –ß—ë—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞": 1,
        "–ê–Ω–∞—Ä—Ö–∏—è V2 Strong –õ–∏–º–æ–Ω–Ω—ã–π –º–∞—Ä–º–µ–ª–∞–¥": 1,
        "–ê–Ω–∞—Ä—Ö–∏—è V2 Strong –ö–ª—é–∫–≤–∞ –±—Ä—É—Å–Ω–∏–∫–∞": 1,
        "–ú–æ–Ω–∞—Ä—Ö–∏—è - –õ–∏–º–æ–Ω –≤–∏–Ω–æ–≥—Ä–∞–¥": 1,
        "–ú–æ–Ω–∞—Ä—Ö–∏—è - –ú–∞–ª–∏–Ω–∞ –ª–∏–º–æ–Ω": 1,
        "MPAK & –ß–Å NADO - –ê—Ä–±—É–∑ –º–∞–ª–∏–Ω–∞": 1,
        "MPAK & –ß–Å NADO - –í–∏–Ω–æ–≥—Ä–∞–¥ –º—è—Ç–∞": 1,
        "MPAK & –ß–Å NADO - –ö–∏—Å–ª—ã–π –ø–µ—Ä—Å–∏–∫": 1,
        "MPAK & –ß–Å NADO - –°–ø—Ä–∞–π—Ç": 1,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –í–∏—à–Ω—è –∂–∏–º–æ–ª–æ—Å—Ç—å": 1,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –ß–µ—Ä–µ—à–Ω—è –∫–ª—é–∫–≤–∞": 1,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –Ø–±–ª–æ–∫–æ –∫–ª—é–∫–≤–∞": 1,
        "LOST MARY MO30000 - –ö–∏—Å–ª—ã–π –≤–∏–Ω–æ–≥—Ä–∞–¥ –ª—ë–¥": 1,
        "LOST MARY OS12000 –í–∏–Ω–æ–≥—Ä–∞–¥ –ª–∏–º–æ–Ω –ª—ë–¥": 0,
        "LOST MARY OS12000 –õ–µ–¥—è–Ω–∞—è –µ–∂–µ–≤–∏–∫–∞": 1,
        "Malasian x Protest - –ú–∞—Ä–∞–∫—É–π—è –∑–µ–ª—ë–Ω–æ–µ —è–±–ª–æ–∫–æ": 2,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –ê–Ω–∞–Ω–∞—Å –º–∞–ª–∏–Ω–∞": 2,
        "–ú–æ–Ω–∞—Ä—Ö–∏—è - –°–º–æ—Ä–æ–¥–∏–Ω–æ–≤—ã–µ –ª–µ–¥–µ–Ω—Ü—ã": 2,
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - –ö—Ä–∞—Å–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞": 2
    }
}

class WarehouseManager:
    def __init__(self):
        self.warehouse_city = {}
        self.warehouse_talovka = {}
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(DATA_FILE):
            try:
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                self.warehouse_city = data.get("warehouse_city", default_data["warehouse_city"])
                self.warehouse_talovka = data.get("warehouse_talovka", default_data["warehouse_talovka"])
                logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                self.reset_to_default()
        else:
            self.reset_to_default()
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                "warehouse_city": self.warehouse_city,
                "warehouse_talovka": self.warehouse_talovka
            }
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def reset_to_default(self):
        """–°–±—Ä–æ—Å –∫ –¥–∞–Ω–Ω—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.warehouse_city = default_data["warehouse_city"].copy()
        self.warehouse_talovka = default_data["warehouse_talovka"].copy()
        self.save_data()
        logger.info("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def register_sale(self, warehouse: str, product_name: str) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–∞"""
        if warehouse == "city":
            if self.warehouse_city.get(product_name, 0) > 0:
                self.warehouse_city[product_name] -= 1
                self.save_data()
                return True
        else:  # talovka
            if self.warehouse_talovka.get(product_name, 0) > 0:
                self.warehouse_talovka[product_name] -= 1
                self.save_data()
                return True
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–ª–∞–¥–æ–≤
warehouse_manager = WarehouseManager()

# –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
AUTHORIZED_USERS = ["@DexterNote", "@puffplace74"]  # –û–±–∞ –º–æ–≥—É—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å
RESET_USERS = ["@puffplace74"]  # –¢–æ–ª—å–∫–æ @puffplace74 –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
NOTIFICATION_USER = "@puffplace74"  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è @puffplace74

# –¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ª–∏—á–∏–µ", callback_data="view_stock")],
        [InlineKeyboardButton("üí∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂", callback_data="sales_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "view_stock":
        await show_warehouse_selection(query, "view")
    elif data == "sales_menu":
        if await check_authorization(query):
            await show_warehouse_selection(query, "sales")
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
    elif data == "back_to_main":
        await start(update, context)
    elif data == "back_to_warehouse_selection_view":
        await show_warehouse_selection(query, "view")
    elif data == "back_to_warehouse_selection_sales":
        await show_warehouse_selection(query, "sales")
    elif data.startswith("warehouse_"):
        _, action, warehouse = data.split("_")
        if action == "view":
            await show_stock(query, warehouse)
        elif action == "sales":
            user_states[user_id] = {"action": "select_product", "warehouse": warehouse}
            await show_products_for_sale(query, warehouse)
    elif data.startswith("product_"):
        _, warehouse, product_index = data.split("_")
        product_index = int(product_index)
        products = list(warehouse_manager.warehouse_city.keys()) if warehouse == "city" else list(warehouse_manager.warehouse_talovka.keys())
        
        if product_index < len(products):
            product_name = products[product_index]
            user_states[user_id] = {
                "action": "confirm_sale", 
                "warehouse": warehouse,
                "product": product_name
            }
            await confirm_sale(query, warehouse, product_name)
    elif data.startswith("confirm_"):
        _, warehouse, product_index, decision = data.split("_")
        product_index = int(product_index)
        products = list(warehouse_manager.warehouse_city.keys()) if warehouse == "city" else list(warehouse_manager.warehouse_talovka.keys())
        
        if product_index < len(products):
            product_name = products[product_index]
            
            if decision == "yes":
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É
                success = warehouse_manager.register_sale(warehouse, product_name)
                
                if success:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ @puffplace74
                    await send_sale_notification(context, query.from_user.username, warehouse, product_name)
                    
                    await query.edit_message_text(
                        f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ '{product_name}' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n"
                        f"–°–∫–ª–∞–¥: {'–ì–æ—Ä–æ–¥' if warehouse == 'city' else '–¢–∞–ª–æ–≤–∫–∞'}\n\n"
                        f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –ï—â–µ –ø—Ä–æ–¥–∞–∂–∞", callback_data=f"warehouse_sales_{warehouse}")],
                            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                        ])
                    )
                else:
                    await query.edit_message_text(
                        f"‚ùå –¢–æ–≤–∞—Ä–∞ '{product_name}' –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!\n\n"
                        f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_sales_{warehouse}")],
                            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                        ])
                    )
            else:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä", callback_data=f"warehouse_sales_{warehouse}")],
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
    elif data == "reset_data":
        if await check_reset_authorization(query):
            # –°–±—Ä–æ—Å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            warehouse_manager.reset_to_default()
            await query.edit_message_text(
                "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")

async def send_sale_notification(context: ContextTypes.DEFAULT_TYPE, seller_username: str, warehouse: str, product_name: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ @puffplace74"""
    try:
        stock_data = warehouse_manager.warehouse_city if warehouse == "city" else warehouse_manager.warehouse_talovka
        current_stock = stock_data[product_name]
        warehouse_name = "–ì–æ—Ä–æ–¥" if warehouse == "city" else "–¢–∞–ª–æ–≤–∫–∞"
        
        seller_display = f"@{seller_username}" if seller_username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        message = (
            f"üí∞ **–ü—Ä–æ–¥–∞–∂–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞**\n\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_display}\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
            f"üè¢ –°–∫–ª–∞–¥: {warehouse_name}\n"
            f"üìä –û—Å—Ç–∞–ª–æ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏: {current_stock} —à—Ç."
        )
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @puffplace74
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å chat_id —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –¥–ª—è {NOTIFICATION_USER}: {message}")
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –õ–°, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # await context.bot.send_message(chat_id=CHAT_ID_PUFFPLACE74, text=message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def show_warehouse_selection(query, action: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞"""
    keyboard = [
        [InlineKeyboardButton("üè¢ –°–∫–ª–∞–¥ –ì–æ—Ä–æ–¥", callback_data=f"warehouse_{action}_city")],
        [InlineKeyboardButton("üè≠ –°–∫–ª–∞–¥ –¢–∞–ª–æ–≤–∫–∞", callback_data=f"warehouse_{action}_talovka")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è @puffplace74 –≤ –º–µ–Ω—é –ø—Ä–æ–¥–∞–∂
    if action == "sales" and await check_reset_authorization(query):
        keyboard.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="reset_data")])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    action_text = "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ª–∏—á–∏–µ" if action == "view" else "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂"
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è {action_text}:",
        reply_markup=reply_markup
    )

async def show_stock(query, warehouse: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    stock_data = warehouse_manager.warehouse_city if warehouse == "city" else warehouse_manager.warehouse_talovka
    warehouse_name = "–ì–æ—Ä–æ–¥" if warehouse == "city" else "–¢–∞–ª–æ–≤–∫–∞"
    
    message = f"üì¶ **–°–∫–ª–∞–¥ {warehouse_name}**\n\n"
    
    for product, quantity in stock_data.items():
        emoji = "üü¢" if quantity > 0 else "üî¥"
        message += f"{emoji} {product}: {quantity} —à—Ç.\n"
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–∞", callback_data="back_to_warehouse_selection_view")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def show_products_for_sale(query, warehouse: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    stock_data = warehouse_manager.warehouse_city if warehouse == "city" else warehouse_manager.warehouse_talovka
    warehouse_name = "–ì–æ—Ä–æ–¥" if warehouse == "city" else "–¢–∞–ª–æ–≤–∫–∞"
    
    message = f"üí∞ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂ - –°–∫–ª–∞–¥ {warehouse_name}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:\n"
    
    keyboard = []
    products = list(stock_data.keys())
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ 1 –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
    for i in range(len(products)):
        product = products[i]
        stock = stock_data[product]
        emoji = "üü¢" if stock > 0 else "üî¥"
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        button_text = create_product_button_text(product, stock)
        
        button = InlineKeyboardButton(
            button_text, 
            callback_data=f"product_{warehouse}_{i}"
        )
        keyboard.append([button])
    
    keyboard.extend([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–∞", callback_data="back_to_warehouse_selection_sales")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

def create_product_button_text(product_name: str, stock: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    short_name = product_name
    
    # –ó–∞–º–µ–Ω—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    replacements = {
        "Malasian x Protest - ": "MxP ",
        "Podonki Blood - ": "PB ",
        "–ê–Ω–∞—Ä—Ö–∏—è V2 Strong ": "–ê–Ω–∞—Ä—Ö–∏—è ",
        "–ú–æ–Ω–∞—Ä—Ö–∏—è - ": "–ú–æ–Ω–∞—Ä—Ö–∏—è ",
        "MPAK & –ß–Å NADO - ": "MPAK ",
        "–•–∞—Å–∫–∏ –Ω–∞ –ê–ª—è—Å–∫–µ Hard - ": "–•–∞—Å–∫–∏ ",
        "LOST MARY MO30000 - ": "LM ",
        "LOST MARY OS12000 ": "LM "
    }
    
    for old, new in replacements.items():
        short_name = short_name.replace(old, new)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    emoji = "üü¢" if stock > 0 else "üî¥"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if len(short_name) > 30:
        short_name = short_name[:27] + "..."
    
    return f"{emoji} {short_name} ({stock} —à—Ç.)"

async def confirm_sale(query, warehouse: str, product_name: str) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
    stock_data = warehouse_manager.warehouse_city if warehouse == "city" else warehouse_manager.warehouse_talovka
    warehouse_name = "–ì–æ—Ä–æ–¥" if warehouse == "city" else "–¢–∞–ª–æ–≤–∫–∞"
    current_stock = stock_data[product_name]
    
    products = list(stock_data.keys())
    product_index = products.index(product_name)
    
    message = (f"üí∞ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏**\n\n"
               f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
               f"üè¢ –°–∫–ª–∞–¥: {warehouse_name}\n"
               f"üìä –¢–µ–∫—É—â–µ–µ –Ω–∞–ª–∏—á–∏–µ: {current_stock} —à—Ç.\n\n"
               f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É?")
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{warehouse}_{product_index}_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"confirm_{warehouse}_{product_index}_no")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data=f"warehouse_sales_{warehouse}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def check_authorization(query) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–∞–∂"""
    user_username = f"@{query.from_user.username}" if query.from_user.username else None
    return user_username in AUTHORIZED_USERS

async def check_reset_authorization(query) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_username = f"@{query.from_user.username}" if query.from_user.username else None
    return user_username in RESET_USERS

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token("8374095503:AAHdapIvuCdi4hjodFWvhz-OVvbEJ44jxdw").build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞:", DATA_FILE)
    application.run_polling()

if __name__ == '__main__':
    main()
